# Data simulation
import pandas as pd
import random

levels = ["A", "B", "C", "D", "E"]
max_age = 80
step = 10

all_paths = []

def generate_paths(path, current_age):
    current_level = path[-1][0]

    if current_level == "E" or current_age >= max_age:
        all_paths.append(path)
        return

    next_age = current_age + step
    for next_level in levels:
        new_path = path + [(next_level, next_age)]
        if next_level == "E":
            all_paths.append(new_path)
        else:
            generate_paths(new_path, next_age)


generate_paths([("A", 0)], 0)


records = []
for system_id, path in enumerate(all_paths):
    for level, age in path:
        records.append({
            "system_id": system_id,
            "age": age,
            "level": level
        })

df = pd.DataFrame(records)


level_to_num = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4}
df["level_num"] = df["level"].map(level_to_num)

new_rows = []
new_system_id = 0

for sid, group in df.sort_values(["system_id", "age"]).groupby("system_id"):
    group = group.reset_index(drop=True)
    current_path = []
    prev_level = group.loc[0, "level_num"]

    for i, row in group.iterrows():
        current_level = row["level_num"]

        if current_level < prev_level:

            for r in current_path:
                r["new_system_id"] = new_system_id
                new_rows.append(r)
            new_system_id += 1
            current_path = []

        current_path.append(row.to_dict())
        prev_level = current_level


    for r in current_path:
        r["new_system_id"] = new_system_id
        new_rows.append(r)
    new_system_id += 1

df_cleaned_all = pd.DataFrame(new_rows)

last_step = df_cleaned_all.sort_values(["new_system_id", "age"]).groupby("new_system_id").tail(1)
not_reached_E = last_step[last_step["level"] != "E"]

new_records = []

for _, row in not_reached_E.iterrows():
    current_level = row["level"]
    current_age = row["age"]
    new_sid = row["new_system_id"]

    while current_level != "E":
          current_age += step
          current_level_index = level_to_num[current_level]
          possible_levels = levels[current_level_index + 1:]
          if not possible_levels:
              break
          current_level = random.choice(possible_levels)

          new_records.append({
              "system_id": row["system_id"],
              "age": current_age,
              "level": current_level,
              "level_num": level_to_num[current_level],
              "new_system_id": new_sid
          })

df_extended = pd.concat([df_cleaned_all, pd.DataFrame(new_records)], ignore_index=True)

def interpolate_missing_levels(df, level_order):
    level_to_num = {l: i for i, l in enumerate(level_order)}
    num_to_level = {i: l for i, l in enumerate(level_order)}
    new_rows = []

    for sid, group in df.groupby("new_system_id"):
        group = group.sort_values("age").reset_index(drop=True)
        for i in range(len(group) - 1):
            current_row = group.loc[i]
            next_row = group.loc[i + 1]
            age_diff = next_row["age"] - current_row["age"]
            level_diff = level_to_num[next_row["level"]] - level_to_num[current_row["level"]]

            if level_diff > 1:
                step_age = age_diff / level_diff
                for step in range(1, level_diff):
                    interpolated_age = current_row["age"] + step * step_age
                    interpolated_level = num_to_level[level_to_num[current_row["level"]] + step]
                    new_rows.append({
                        "system_id": current_row["system_id"],
                        "age": interpolated_age,
                        "level": interpolated_level,
                        "level_num": level_to_num[interpolated_level],
                        "new_system_id": current_row["new_system_id"]
                    })

    df_interpolated = pd.concat([df, pd.DataFrame(new_rows)], ignore_index=True)
    df_interpolated = df_interpolated.sort_values(["new_system_id", "age"]).reset_index(drop=True)
    return df_interpolated

level_order = ['A', 'B', 'C', 'D', 'E']

df_extended_filled = interpolate_missing_levels(df_extended, level_order)


# Data visualization
import matplotlib.pyplot as plt

levels = ["A", "B", "C", "D", "E"]
selected_sid = 73621

original_path = df[df["system_id"] == selected_sid].sort_values("age")
related_cleaned_paths = df_cleaned_all[df_cleaned_all["system_id"] == selected_sid]
related_extended_paths = df_extended[df_extended["system_id"] == selected_sid]
related_extended_filled_paths = df_extended_filled[df_extended_filled["system_id"] == selected_sid]

plt.figure(figsize=(15, 5))

plt.subplot(1, 4, 1)
plt.plot(original_path["age"], original_path["level_num"], marker='o', color='blue')
plt.title("Original Path")
plt.xlabel("Age")
plt.ylabel("Level")
plt.yticks(range(5), labels=levels)
plt.grid(True)


plt.subplot(1, 4, 2)
for nsid in related_cleaned_paths["new_system_id"].unique():
    group = related_cleaned_paths[related_cleaned_paths["new_system_id"] == nsid]
    plt.plot(group["age"], group["level_num"], marker='o', label=f"Sub-system {nsid}")
plt.title("After Splitting")
plt.xlabel("Age")
plt.ylabel("Level")
plt.yticks(range(5), labels=levels)
plt.legend()
plt.grid(True)


plt.subplot(1, 4, 3)
for nsid in related_extended_paths["new_system_id"].unique():
    group = related_extended_paths[related_extended_paths["new_system_id"] == nsid]
    plt.plot(group["age"], group["level_num"], marker='o', label=f"Sub-system {nsid}")
plt.title("Extended to E")
plt.xlabel("Age")
plt.ylabel("Level")
plt.yticks(range(5), labels=levels)
plt.legend()
plt.grid(True)


plt.subplot(1, 4, 4)
for nsid in related_extended_filled_paths["new_system_id"].unique():
    group = related_extended_filled_paths[related_extended_filled_paths["new_system_id"] == nsid]
    plt.plot(group["age"], group["level_num"], marker='o', label=f"Sub-system {nsid}")
plt.title("Final(Extended to E-interpolate)")
plt.xlabel("Age")
plt.ylabel("Level")
plt.yticks(range(5), labels=levels)
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()


# Data Saving
df.to_csv("df.csv", index=True)
df_cleaned_all.to_csv("df_cleaned_all.csv", index=True)
df_extended.to_csv("df_extended.csv", index=True)
df_extended_filled.to_csv("df_extended_filled.csv", index=True)
